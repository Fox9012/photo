#создай тут фоторедактор Easy Editor!
import os
from PIL import Image,ImageFilter
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QLabel, QPushButton,QWidget,QVBoxLayout,QHBoxLayout,QApplication,QListWidget,QFileDialog,QMessageBox
class ImageProcesor():
    def __init__(self):
        self.dir = None
        self.filename = None
        self.image = None
        self.save_dir = 'Modified/'
    def loadImage(self,filename):
        self.filename = filename
        image_path = os.path.join(workdir, filename)
        self.image = Image.open(image_path)
    def showImage(self,path):
        lb_img.hide()
        pixmapimage = QPixmap(path)
        w, h = lb_img.width(), lb_img.height()
        pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
        lb_img.setPixmap(pixmapimage)
        lb_img.show()
    def do_bw(self):
        self.image = self.image.convert('L')
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir, self.filename)
        self.showImage(image_path)
    def do_left(self):
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir, self.filename)
        self.showImage(image_path)
    def do_right(self):
        self.image = self.image.transpose(Image.ROTATE_270)
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir, self.filename)
        self.showImage(image_path)
    def do_flip(self):
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir, self.filename)
        self.showImage(image_path)
    def do_sharp(self):
        self.image = self.image.filter(ImageFilter.SHARPEN)
        self.saveImage()
        image_path = os.path.join(workdir,self.save_dir, self.filename)
        self.showImage(image_path)
    def saveImage(self):
        path = os.path.join(workdir,self.save_dir)
        if not(os.path.exists(path) or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)
        
def chooseWorkdir():
    global workdir
    workdir = QFileDialog.getExistingDirectory()
    if workdir == 'Отмена':
        print_error()
    else:
        print_error()
def filter(files, extensions):
    result = []
    for file in files:
        for ext in extensions:
            if file.endswith(ext):
                result.append(file)
    return result
def showFilenameslist():
    chooseWorkdir()
    files = os.listdir(workdir)
    exceptions = ['.jpg', '.jpeg', '.gif', '.bmp','.png']
    file_name = filter(files, exceptions)
    list_img.clear()    
    list_img.addItems(file_name)
def showChosenImage():
    if list_img.currentRow() >= 0:
        filename = list_img.currentItem().text()
        work_img.loadImage(filename)
        image_path = os.path.join(workdir, work_img.filename)
        work_img.showImage(image_path)
def print_error():
    error_win = QMessageBox()
    error_win.setWindowTitle('Ошибка!')
    error_win.setText('Выберите картинку!')
    error_win.exec_()
app = QApplication([])
mw = QWidget()
work_img = ImageProcesor()
mw.resize(700, 500)
mw.setWindowTitle('Easy Editor')
list_img = QListWidget()
btn_dir = QPushButton('Папка')
btn_left = QPushButton('В лево')
btn_right = QPushButton('В право')
btn_flip = QPushButton('Отразить')
btn_sharp = QPushButton('Резкость')
btn_bw = QPushButton('Ч/Б')
lb_img = QLabel('картинка')
col1 = QVBoxLayout()
col2 = QVBoxLayout()
row = QHBoxLayout()
btn_layout = QHBoxLayout()
col1.addWidget(btn_dir)
col1.addWidget(list_img)
col2.addWidget(lb_img)
btn_layout.addWidget(btn_left)
btn_layout.addWidget(btn_right)
btn_layout.addWidget(btn_flip)
btn_layout.addWidget(btn_sharp)
btn_layout.addWidget(btn_bw)
col2.addLayout(btn_layout)
row.addLayout(col1,20)
row.addLayout(col2,80)
mw.setLayout(row)
btn_dir.clicked.connect(showFilenameslist)
list_img.currentRowChanged.connect(showChosenImage)
btn_bw.clicked.connect(work_img.do_bw)
btn_left.clicked.connect(work_img.do_left)
btn_right.clicked.connect(work_img.do_right)
btn_flip.clicked.connect(work_img.do_flip)
btn_sharp.clicked.connect(work_img.do_sharp) 
mw.show()
app.exec_()